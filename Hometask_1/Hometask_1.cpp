#include <iostream>
#include <bitset>

/*Напишите функцию, которая инвертирует только выбранные биты в участке памяти, заданном указателем и длиной в байтах.
Способ выбора битов для инвертирования на ваше усмотрение.*/


/// <summary>
/// Функция, которая инвертирует только выбранные биты (с помощью маски) в участке памяти
/// </summary>
/// <param name="x"> - Указатель на участок памяти </param>
/// <param name="size">- Размер участка в байтах</param>
/// <param name="m">- Указатель на маску</param>
void invert_bits(uint8_t* x, size_t size, uint8_t* m)
{
    for (size_t i = 0; i < size; i++)
    {          
        x[i] ^= m[i];  // Побитовое взаимоисключающее или (XOR) возвращает 1 в бите, если операнды различны       
    }
}

int main() 
{
    setlocale(LC_ALL,"");

    uint8_t x = 0b01010101; // участок памяти
    size_t size = sizeof(x); //размер участка в байтах
    std::cout << std::bitset<sizeof(x) * 8>(x) << " до инвертирования" << '\n';

    uint8_t m = 0b10101010;
    std::cout << std::bitset<sizeof(x) * 8>(m) << " маска" << '\n'; //маска для инвертирования, можно менять значения по желанию
    
    invert_bits(&x, size, &m); //основная функция

    std::cout << std::bitset<sizeof(x)*8>(x) << " после инвертирования" << '\n';

    return 0;
}

